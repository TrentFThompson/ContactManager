{"version":3,"sources":["context.js","components/Contacts/Contact.js","components/Contacts/Contacts.js","components/Layout/TextInputGroup.js","components/Contacts/AddContact.js","components/Contacts/EditContact.js","components/Layout/Header.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Consumer","Component","TextInputGroup","label","name","value","placeHolder","onChange","error","className","htmlFor","classnames","placeholder","defaultProps","Header","props","branding","href","to","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2TAGMA,EAAUC,IAAMC,gBAGhBC,EAAU,SAACC,EAAOC,GACpB,OAAOA,EAAOC,MACV,IAAK,iBACD,OAAO,2BACAF,GADP,IAEIG,SAAUH,EAAMG,SAASC,QAAO,SAAAC,GAAO,OAAIA,EAAQC,KAAOL,EAAOM,aAEzE,IAAK,cACG,OAAO,2BACAP,GADP,IAEIG,SAAS,CAAEF,EAAOM,SAAV,mBAAsBP,EAAMG,aAEhD,IAAK,iBACG,OAAO,2BACAH,GADP,IAEIG,SAAUH,EAAMG,SAASK,KAAI,SAAAH,GAAO,OAAIA,EAAQC,KAAOL,EAAOM,QAAQD,GAAMD,EAAUJ,EAAOM,QAAWF,OAEpH,QACI,OAAOL,IAwCNS,GA/BiBC,YA+BNd,EAAQa,U,GCzDVC,YCFgBA,Y,wBCAhCC,EAAiB,SAAC,GAQjB,IAPHC,EAOE,EAPFA,MACAC,EAME,EANFA,KACAC,EAKE,EALFA,MACAC,EAIE,EAJFA,YACAb,EAGE,EAHFA,KACAc,EAEE,EAFFA,SACAC,EACE,EADFA,MAEA,OACI,yBAAKC,UAAU,cACX,2BAAOC,QAASN,GAAOD,GACvB,2BACIV,KAAOA,EACPgB,UAAWE,IAAW,+BAAgC,CAAC,aAAcH,IACrEI,YAAaN,EACbF,KAAMA,EACNC,MAAOA,EACPE,SAAUA,IAEbC,GAAS,yBAAKC,UAAU,oBAAoBD,KAczDN,EAAeW,aAAe,CAC1BpB,KAAM,QAIKS,QCtCyBD,YCACA,YCE1B,SAASa,EAAOC,GAAQ,IAC5BC,EAAYD,EAAZC,SACP,OACI,yBAAKP,UAAU,4DACX,yBAAKA,UAAU,aACX,uBAAGQ,KAAK,IAAIR,UAAU,gBACjBO,GAEL,6BACI,wBAAIP,UAAU,sBACV,4BACI,kBAAC,IAAD,CAAMS,GAAG,IAAIT,UAAU,YACnB,uBAAGA,UAAU,gBADjB,SAIJ,4BACI,kBAAC,IAAD,CAAMS,GAAG,eAAeT,UAAU,YAClC,uBAAGA,UAAU,gBADb,QAIJ,4BACI,kBAAC,IAAD,CAAMS,GAAG,SAAST,UAAU,YAC5B,uBAAGA,UAAU,oBADb,cAe5BK,EAAOD,aAAe,CAClBG,SAAU,U,YCTCG,MAtBf,aCFoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACL6B,QAAQ7B,MAAMA,EAAM8B,c","file":"static/js/main.d6a83d59.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\r\n            }\r\n        case 'ADD_CONTACT':\r\n                return {\r\n                    ...state,\r\n                    contacts: [action.payload, ...state.contacts]\r\n                }    \r\n        case 'UPDATE_CONTACT':\r\n                return {\r\n                    ...state,\r\n                    contacts: state.contacts.map(contact => contact.id === action.payload.id ? (contact = action.payload) : contact)\r\n                }          \r\n        default:\r\n            return state;    \r\n    }\r\n}\r\n\r\n\r\n\r\n// This class is basically how you have context anywhere within your application\r\n// Wrapping everything in the return of app.js with a provider allows you to access this\r\n// state from anywhere\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => {\r\n            this.setState(state => reducer(state, action))\r\n        }\r\n    };\r\n\r\n\r\n\r\n    async componentDidMount() {\r\n        const res = await axios.get('https://jsonplaceholder.typicode.com/users')\r\n        \r\n        this.setState({contacts: res.data});\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            // Value holds the entire state of our Application\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>    \r\n        )\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Consumer} from '../../context';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nclass Contact extends Component {\r\n    state = {\r\n        showContactInfo: true\r\n    };\r\n\r\n\r\n   \r\n    // Defining custom methods as an arrow function allows you to call functions without having to bind \"this\"\r\n    // Otherwise there are a few ways to bind, such as in-line or using the constructor\r\n    // You still need to bind inline to pass params (this.showOnClick.bind(this, restOfParams...))\r\n    onShowClick = (e) => {\r\n        this.setState({showContactInfo: !this.state.showContactInfo});\r\n    }\r\n\r\n\r\n\r\n    // This method will invoke a method that was passed in as props\r\n    onDeleteClick = async (id, dispatch) => {\r\n        // Got rid of this because we are using the context api now\r\n        // this.props.deleteClickHandler();\r\n\r\n        // This try catch is only done because the json placeholder doesn't allow you \r\n        // to actually delete stuff, but we still want to remove the item from the DOM\r\n        try{\r\n            await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n            dispatch({type: 'DELETE_CONTACT', payload: id})\r\n        }\r\n        catch (e) {\r\n            dispatch({type: 'DELETE_CONTACT', payload: id})\r\n        }\r\n        \r\n        // Here we invoke the dispatch that we get from the consumer as a parameter to this function\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const{id, name, email, phone} = this.props.contact;\r\n        const {showContactInfo} = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {dispatch} = value;\r\n                    return (\r\n                        // Using classNames like this is how you would get your bootstrap design\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4>{name} <i className=\"fas fa-sort-down\" onClick={this.onShowClick} style={{cursor: \"pointer\"}}/>\r\n                                <i className=\"fas fa-times\" style={{cursor: \"pointer\", float: \"right\", color: \"red\"}} \r\n                                    onClick={this.onDeleteClick.bind(this, id, dispatch)}/>\r\n                                \r\n                                <Link to={`contact/edit/${id}`}>\r\n                                    <i \r\n                                        className=\"fas fa-pencil-alt\" \r\n                                        style={{\r\n                                            cursor: \"pointer\", \r\n                                            float: \"right\",\r\n                                            color: 'black',\r\n                                            marginRight: '1rem'\r\n                                        }}>\r\n                                    </i>\r\n                                </Link>    \r\n\r\n                            </h4>\r\n                            {showContactInfo ? (\r\n                                <ul className=\"list-group\">\r\n                                <li className=\"list-group-item\">Email: {email}</li>\r\n                                <li className=\"list-group-item\">Phone: {phone}</li>\r\n                                </ul>) : null}\r\n                    </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n\r\n\r\n            \r\n        )\r\n    }\r\n};\r\n\r\n\r\n\r\n// This is a way of defining what props you are expecting when creating an object\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n\r\n    // This is essentially how you would pass methods from one component to another\r\n    // deleteClickHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Contact;\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport Contact from './Contact'\r\nimport {Consumer} from \"../../context\";\r\n\r\n\r\nexport default class Contacts extends Component {\r\n    // // You can do state like this if you don't need to initialize anything\r\n    // // Otherwise you would declare this.state = in the constructor\r\n    // state = {\r\n    //     contacts: [\r\n    //         {\r\n    //             id: 1,\r\n    //             name: \"john\",\r\n    //             email: \"jdoe@gmail.com\",\r\n    //             phone: \"555-555-5555\"\r\n    //         },\r\n    //         {\r\n    //             id: 2,\r\n    //             name: \"bob\",\r\n    //             email: \"bob@gmail.com\",\r\n    //             phone: \"556-555-5555\"\r\n    //         },\r\n    //         {\r\n    //             id: 3,\r\n    //             name: \" karen\",\r\n    //             email: \"kwilliams@gmail.com\",\r\n    //             phone: \"557-555-5555\"\r\n    //         }\r\n    //     ]\r\n    // };\r\n\r\n\r\n\r\n    // // This is the handler for deleting contacts\r\n    // deleteContact = (id) => {\r\n    //     // Here we destructure the state to get our list of contacts\r\n    //     const {contacts} = this.state;\r\n\r\n    //     // Filter from the list of contacts everything that doesn't match the id passed int\r\n    //     const newContacts = contacts.filter(contact => contact.id !== id);\r\n\r\n    //     // Set the state with the new filtered contact list\r\n    //     this.setState({contacts: newContacts})\r\n    // };\r\n    \r\n\r\n\r\n\r\n    render() {\r\n        // Need to wrape everything we return in the consumer\r\n        return (\r\n            // Consumer gives us value\r\n            <Consumer>\r\n                {value => {\r\n                    // This value comes from the consumer\r\n                    const {contacts} = value;\r\n                    return (\r\n                        // Doing map like this is how you would go through your list\r\n                        // of contacts and create a Contact object for each one of them\r\n                        // Using react.fragment allows you to return JSX without adding \r\n                        // an actual DIV element, etc.\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\"><span className=\"text-danger\">Contact</span> List</h1>\r\n                        {contacts.map(contact => (\r\n                            <Contact key={contact.id} contact={contact}/>\r\n                        ))}\r\n                        </React.Fragment>\r\n                    )\r\n                }}\r\n            </Consumer>    \r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\n\r\n\r\nconst TextInputGroup = ({\r\n    label,\r\n    name,\r\n    value,\r\n    placeHolder,\r\n    type,\r\n    onChange,\r\n    error\r\n}) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input \r\n                type ={type}\r\n                className={classnames('form-control form-control-lg', {'is-invalid': error})}\r\n                placeholder={placeHolder}\r\n                name={name}\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>    \r\n    )\r\n}\r\n\r\nTextInputGroup.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    placeHolder: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired\r\n}\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text'\r\n}\r\n\r\n\r\nexport default TextInputGroup;","import React, { Component } from 'react'\r\nimport {Consumer} from '../../context';\r\n//import uuid from \"uuid\";\r\nimport TextInputGroup from '../Layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\nexport default class AddContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n\r\n\r\n    onSubmit = async(dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const {name, email, phone} = this.state;\r\n\r\n        // Check For Errors\r\n        if(name === '') {\r\n            this.setState({errors: {name: \"Name is required\"}})\r\n            return;\r\n        }\r\n\r\n        // Check For Errors\r\n        if(email === '') {\r\n            this.setState({errors: {email: \"Email is required\"}})\r\n            return;\r\n        }\r\n\r\n        // Check For Errors\r\n        if(phone === '') {\r\n            this.setState({errors: {phone: \"Phone is required\"}})\r\n            return;\r\n        }\r\n\r\n        const newContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n\r\n        const res = await axios.post('https://jsonplaceholder.typicode.com/users', newContact)\r\n\r\n        dispatch({type: \"ADD_CONTACT\", payload: res.data})\r\n            \r\n        \r\n\r\n        // Clear state\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: \"\",\r\n            errors: {}\r\n        });\r\n\r\n        // Use this to redirect after adding a contact\r\n        this.props.history.push('/');\r\n    }\r\n\r\n\r\n\r\n    onChange = e => this.setState({[e.target.name]: e.target.value})\r\n\r\n\r\n\r\n    render() {\r\n        \r\n        const {name,email,phone,errors} = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {dispatch} = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Add Contact</div>\r\n                                <div className=\"card-body\">\r\n                                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                        <TextInputGroup\r\n                                            label=\"Name\"\r\n                                            name=\"name\"\r\n                                            placeHolder=\"Enter Name...\"\r\n                                            value={name}\r\n                                            onChange={this.onChange}\r\n                                            error={errors.name}\r\n                                        />\r\n                                        <TextInputGroup\r\n                                            label=\"Email\"\r\n                                            name=\"email\"\r\n                                            type=\"email\"\r\n                                            placeHolder=\"Enter Email...\"\r\n                                            value={email}\r\n                                            onChange={this.onChange}\r\n                                            error={errors.email}\r\n                                        />\r\n                                        <TextInputGroup\r\n                                            label=\"Phone\"\r\n                                            name=\"phone\"\r\n                                            placeHolder=\"Enter Phone...\"\r\n                                            value={phone}\r\n                                            onChange={this.onChange}\r\n                                            error={errors.phone}\r\n                                        />                                   \r\n                                    <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-light btn-block\"/>\r\n                                </form>   \r\n                            </div>    \r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>    \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Consumer} from '../../context';\r\n//import uuid from \"uuid\";\r\nimport TextInputGroup from '../Layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\nexport default class EditContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        const {id} = this.props.match.params;\r\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n        const contact = res.data;\r\n\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone\r\n        });\r\n    }\r\n\r\n\r\n\r\n    onSubmit = async(dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const {name, email, phone} = this.state;\r\n\r\n        // Check For Errors\r\n        if(name === '') {\r\n            this.setState({errors: {name: \"Name is required\"}})\r\n            return;\r\n        }\r\n\r\n        // Check For Errors\r\n        if(email === '') {\r\n            this.setState({errors: {email: \"Email is required\"}})\r\n            return;\r\n        }\r\n\r\n        // Check For Errors\r\n        if(phone === '') {\r\n            this.setState({errors: {phone: \"Phone is required\"}})\r\n            return;\r\n        }\r\n\r\n        const updContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const {id} = this.props.match.params;\r\n        \r\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updContact);\r\n        \r\n        dispatch({type:'UPDATE_CONTACT', payload: res.data});\r\n\r\n        // Clear state\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: \"\",\r\n            errors: {}\r\n        });\r\n\r\n        // Use this to redirect after adding a contact\r\n        this.props.history.push('/');\r\n    }\r\n\r\n\r\n\r\n    onChange = e => this.setState({[e.target.name]: e.target.value})\r\n\r\n\r\n\r\n    render() {\r\n        const {name,email,phone,errors} = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {dispatch} = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Edit Contact</div>\r\n                                <div className=\"card-body\">\r\n                                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                        <TextInputGroup\r\n                                            label=\"Name\"\r\n                                            name=\"name\"\r\n                                            placeHolder=\"Enter Name...\"\r\n                                            value={name}\r\n                                            onChange={this.onChange}\r\n                                            error={errors.name}\r\n                                        />\r\n                                        <TextInputGroup\r\n                                            label=\"Email\"\r\n                                            name=\"email\"\r\n                                            type=\"email\"\r\n                                            placeHolder=\"Enter Email...\"\r\n                                            value={email}\r\n                                            onChange={this.onChange}\r\n                                            error={errors.email}\r\n                                        />\r\n                                        <TextInputGroup\r\n                                            label=\"Phone\"\r\n                                            name=\"phone\"\r\n                                            placeHolder=\"Enter Phone...\"\r\n                                            value={phone}\r\n                                            onChange={this.onChange}\r\n                                            error={errors.phone}\r\n                                        />                                   \r\n                                    <input type=\"submit\" value=\"Update Contact\" className=\"btn btn-light btn-block\"/>\r\n                                </form>   \r\n                            </div>    \r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>    \r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\n\r\n\r\n\r\nexport default function Header(props) {\r\n    const {branding} = props;\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0 \">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">\r\n                    {branding}\r\n                </a>\r\n                <div> \r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li>\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fas fa-home\"></i>Home \r\n                            </Link>   \r\n                        </li>    \r\n                        <li>\r\n                            <Link to=\"/contact/add\" className=\"nav-link\">\r\n                            <i className=\"fas fa-plus\"></i>Add\r\n                            </Link>   \r\n                        </li>   \r\n                        <li>\r\n                            <Link to=\"/about\" className=\"nav-link\">\r\n                            <i className=\"fas fa-question\"></i>About\r\n                            </Link>   \r\n                        </li>   \r\n                    </ul>    \r\n                </div>\r\n            </div>    \r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n// This is how you define default props for a field if nothing has been passed\r\nHeader.defaultProps = {\r\n    branding: 'My App'\r\n};\r\n\r\n\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n};\r\n","import React from 'react';\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\nimport Contacts from './components/Contacts/Contacts'\nimport AddContact from './components/Contacts/AddContact'\nimport EditContact from './components/Contacts/EditContact'\nimport Header from './components/Layout/Header'\nimport About from './components/Pages/About'\nimport NotFound from './components/Pages/NotFound'\n\nimport {Provider} from './context';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n\nfunction App() {\n  return (\n    // Wrap the whole application in the provider so we can access it\n    <Provider>\n      <Router>\n        <div className=\"App\">\n          <Header branding=\"Contact Manager\"/>\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={Contacts}/>\n              <Route exact path=\"/contact/add\" component={AddContact}/>\n              <Route exact path=\"/contact/edit/:id\" component={EditContact}/>\n              <Route exact path=\"/about\" component={About}/>\n              <Route component={NotFound}/>\n            </Switch>  \n          </div>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}